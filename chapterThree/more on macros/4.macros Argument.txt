function like macros can take argument.just like true functions. to define a macro that uses arguments, you insert parameters between the pair of paranthases.
in the macro definition that make the macro function like.{the parameters must be valid C identifiers}
seperated by commas and optionaly whitespace.

to invoke a macro that takes argument , you write the name of the macro followed by a list of actual arguments in paranthases,seperated by comma.
this invocation of the macro need not be restricted to a single logical line __ it can cross as many lines in the source file as you wish.
{the number of arguments you give must match the number of parameters in the macro definition}.
when the macro is expanded , each use of a parameter in its body is replaced by the tokens of the corresponding arguments.(you need not use all of the parameter in the macro body)

As an example, here is a macro that computes the minimum of two numeric values, as it is defined in many C programs, and some uses.

#define min(X, Y)  ((X) < (Y) ? (X) : (Y))
  x = min(a, b);          →  x = ((a) < (b) ? (a) : (b));
  y = min(1, 2);          →  y = ((1) < (2) ? (1) : (2));
  z = min(a + 28, *p);    →  z = ((a + 28) < (*p) ? (a + 28) : (*p));

continues...