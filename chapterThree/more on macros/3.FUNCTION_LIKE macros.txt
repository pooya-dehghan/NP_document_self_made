you can also define macros whose use looks like a function call. these are called function like macros.to define a fucntion like macro , you use 
the same "#define" directive , but you put a pait of paranthesis immediately after the macro name . for example :

#define lang_init()  c_init()
lang_init()
     → c_init()

a function like macro is only expanded if its name appears with a pair of paranthesis after it.
if you write just the name , its left alone . this can be useful when you have a fucntion and a macro of the same name,and you wish to use the 
fucntion sometimes.

extern void foo(void);
#define foo() /* optimized inline version */
…
  foo();
  funcptr = foo;

here the call to foo() will use the macro , but the fucntion pointer will get the address of the real function . if the macro were to be expanded , it would cause a syntax error.

If you put spaces between the macro name and the parentheses in the macro definition, that does not define a function-like macro, it defines an object-like macro whose expansion happens to begin with a pair of parentheses.

#define lang_init ()    c_init()
lang_init()
     → () c_init()()
The first two pairs of parentheses in this expansion come from the macro. The third is the pair that was originally after the macro invocation. Since lang_init is an object-like macro, it does not consume those parentheses.